"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Calendar = void 0;
/* eslint-disable @typescript-eslint/no-unnecessary-type-assertion */
var react_1 = __importDefault(require("react"));
var ps_design_system_button_1 = __importDefault(require("@pluralsight/ps-design-system-button"));
var ps_design_system_icon_1 = require("@pluralsight/ps-design-system-icon");
var ps_design_system_util_1 = require("@pluralsight/ps-design-system-util");
var ps_design_system_focusmanager_1 = __importDefault(require("@pluralsight/ps-design-system-focusmanager"));
var ps_design_system_theme_1 = __importDefault(require("@pluralsight/ps-design-system-theme"));
var date_fns_1 = require("date-fns");
require("../css/index.css");
var index_1 = require("../vars/index");
var monthNamesShort = [
    'Jan',
    'Feb',
    'Mar',
    'Apr',
    'May',
    'Jun',
    'Jul',
    'Aug',
    'Sep',
    'Oct',
    'Nov',
    'Dec'
];
var weekdayNamesShort = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
var focusForwardMonthButton = function (context) {
    var _a;
    (_a = context.querySelector('#forward-month')) === null || _a === void 0 ? void 0 : _a.focus();
};
var focusBackwardMonthButton = function (context) {
    var _a;
    (_a = context.querySelector('#backward-month')) === null || _a === void 0 ? void 0 : _a.focus();
};
exports.Calendar = react_1.default.forwardRef(function (_a, forwarededRef) {
    var calendars = _a.calendars, className = _a.className, getBackProps = _a.getBackProps, getForwardProps = _a.getForwardProps, children = _a.children, _b = _a.selected, selected = _b === void 0 ? new Date() : _b, _c = _a.autofocus, autofocus = _c === void 0 ? false : _c, _d = _a.trapped, trapped = _d === void 0 ? false : _d, _e = _a.returnFocus, returnFocus = _e === void 0 ? false : _e, getDateProps = _a.getDateProps, rest = __rest(_a, ["calendars", "className", "getBackProps", "getForwardProps", "children", "selected", "autofocus", "trapped", "returnFocus", "getDateProps"]);
    var _f = react_1.default.useState(), slide = _f[0], setSlide = _f[1];
    var _g = react_1.default.useState(), height = _g[0], setHeight = _g[1];
    var _h = react_1.default.useState(selected), focusable = _h[0], setFocusable = _h[1];
    var _j = react_1.default.useState(false), monthButtonClicked = _j[0], setMonthButtonClicked = _j[1];
    var _k = getBackProps({ calendars: calendars }), onBackClick = _k.onClick, backRest = __rest(_k, ["onClick"]);
    var _l = getForwardProps({
        calendars: calendars
    }), onForwardClick = _l.onClick, forwardRest = __rest(_l, ["onClick"]);
    var headerRef = react_1.default.useRef(null);
    var handleForwardClick = function (e) {
        onForwardClick(e);
        var nextDate = date_fns_1.add(focusable, { months: 1 });
        setFocusable(nextDate);
        setSlide(index_1.slides.forward);
        setMonthButtonClicked(true);
        var header = headerRef.current;
        header && ps_design_system_util_1.debounce(100, focusForwardMonthButton)(header);
    };
    var handleBackClick = function (e) {
        onBackClick(e);
        var nextDate = date_fns_1.sub(focusable, { months: 1 });
        setFocusable(nextDate);
        setSlide(index_1.slides.backward);
        setMonthButtonClicked(true);
        var header = headerRef.current;
        header && ps_design_system_util_1.debounce(100, focusBackwardMonthButton)(header);
    };
    var handleKeyDown = function (evt) {
        var key = evt.key;
        if (key === 'Enter' || key === ' ') {
            evt.currentTarget.id === 'backward-month'
                ? handleBackClick(evt)
                : handleForwardClick(evt);
            evt.preventDefault();
        }
    };
    var animationRef = react_1.default.useRef();
    react_1.default.useEffect(function () {
        var el = animationRef.current;
        if (el) {
            var height_1 = el.getBoundingClientRect().height;
            setHeight(height_1);
        }
    }, [slide]);
    react_1.default.useEffect(function () {
        var el = animationRef.current;
        if (el) {
            var height_2 = el.getBoundingClientRect().height;
            setHeight(height_2);
            var updateOffset_1 = function () { return setSlide(undefined); };
            el.addEventListener('animationend', updateOffset_1);
            return function () { return el.removeEventListener('animationend', updateOffset_1); };
        }
    }, []);
    var gridLabels = calendars.map(function (calendar, i) {
        return ps_design_system_util_1.generateId("psds-datepicker-grid--" + calendar.month + "/" + calendar.year + "-");
    });
    var ref = react_1.default.useRef(null);
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
    react_1.default.useImperativeHandle(forwarededRef, function () { return ref.current; });
    return calendars.length ? (react_1.default.createElement(ps_design_system_focusmanager_1.default, __assign({}, rest, { className: ps_design_system_util_1.classNames('psds-calendar', className), ref: forwarededRef, autofocus: autofocus, trapped: trapped, returnFocus: returnFocus }),
        react_1.default.createElement("div", { className: "psds-calendar__header-wrapper", ref: headerRef }, calendars.map(function (calendar, i) { return (react_1.default.createElement("div", { key: "" + calendar.month + calendar.year, className: "psds-calendar__header" },
            react_1.default.createElement(ps_design_system_theme_1.default, { name: ps_design_system_theme_1.default.names.light },
                react_1.default.createElement("div", { className: "psds-calendar__month" },
                    i === 0 ? (react_1.default.createElement(ps_design_system_button_1.default, __assign({}, backRest, { className: "psds-calendar__header-button", id: "backward-month", onClick: handleBackClick, onKeyDown: handleKeyDown, icon: react_1.default.createElement(ps_design_system_icon_1.CaretLeftIcon, null), appearance: ps_design_system_button_1.default.appearances.flat }))) : (react_1.default.createElement("div", { className: "psds-calendar__header-button" })),
                    react_1.default.createElement("h2", { key: "" + calendar.month + calendar.year, id: gridLabels[i], className: "psds-calendar__header-month" },
                        monthNamesShort[calendar.month],
                        " ",
                        calendar.year),
                    calendars.length - 1 === i ? (react_1.default.createElement(ps_design_system_button_1.default, __assign({}, forwardRest, { id: "forward-month", className: "psds-calendar__header-button", onClick: handleForwardClick, onKeyDown: handleKeyDown, icon: react_1.default.createElement(ps_design_system_icon_1.CaretRightIcon, null), appearance: ps_design_system_button_1.default.appearances.flat }))) : (react_1.default.createElement("div", { className: "psds-calendar__header-button" })))),
            weekdayNamesShort.map(function (weekday) { return (react_1.default.createElement("div", { key: "" + calendar.month + calendar.year + weekday, className: "psds-calendar__weekday-header" }, weekday)); }))); })),
        react_1.default.createElement("div", { style: { height: height }, className: "psds-calendar__date-grid" },
            react_1.default.createElement("div", { className: ps_design_system_util_1.classNames('psds-calendar__grid-slide', slide === 'forward' && 'psds-calendar__grid-slide--forward', slide === 'backward' && 'psds-calendar__grid-slide--backward'), ref: animationRef }, calendars.map(function (calendar, i) { return (react_1.default.createElement("div", { className: "psds-calendar__date-grid", key: "" + calendar.month + calendar.year }, calendar.weeks.map(function (week, weekIndex) {
                return week.map(function (dateObj, index) {
                    var key = "" + calendar.month + calendar.year + weekIndex + index;
                    if (!dateObj) {
                        return (react_1.default.createElement("div", { key: key, className: ps_design_system_util_1.classNames('psds-calendar__filler', className) }));
                    }
                    var dateProps = getDateProps({
                        dateObj: dateObj
                    });
                    return children({
                        key: key,
                        dateObj: dateObj,
                        dateProps: dateProps,
                        'aria-labelledby': gridLabels[i],
                        calendars: calendars,
                        focusable: focusable,
                        getBackProps: getBackProps,
                        getForwardProps: getForwardProps,
                        monthButtonClicked: monthButtonClicked,
                        setFocusable: setFocusable,
                        setMonthButtonClicked: setMonthButtonClicked,
                        setSlide: setSlide
                    });
                });
            }))); }))))) : null;
});
//# sourceMappingURL=calendar.js.map