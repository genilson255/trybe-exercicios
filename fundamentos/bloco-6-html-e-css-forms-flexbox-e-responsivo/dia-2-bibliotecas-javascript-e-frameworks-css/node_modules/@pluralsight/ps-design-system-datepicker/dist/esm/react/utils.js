var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
/* eslint-disable @typescript-eslint/no-unnecessary-type-assertion */
import { classNames } from '@pluralsight/ps-design-system-util';
import { parse, isMatch, format } from 'date-fns';
import React from 'react';
import '../css/index.css';
export var useIsInRange = function (selected) {
    if (selected === void 0) { selected = []; }
    var _a = React.useState(), hoveredDate = _a[0], setHoveredDate = _a[1];
    // Calendar level
    var onMouseLeave = function () {
        setHoveredDate(undefined);
    };
    // Date level
    var onMouseEnter = function (date) {
        if (!selected.length) {
            return;
        }
        setHoveredDate(date);
    };
    var isInRange = function (date) {
        if (selected.length) {
            var firstSelected = selected[0].getTime();
            if (selected.length === 2) {
                var secondSelected = selected[1].getTime();
                return classNames(firstSelected < date.getTime() &&
                    secondSelected > date.getTime() &&
                    'psds-calendar__date--in-range', firstSelected === date.getTime() &&
                    'psds-calendar__date--selected-start', secondSelected === date.getTime() &&
                    'psds-calendar__date--selected-end');
            }
            else {
                return classNames(hoveredDate &&
                    ((firstSelected < date.getTime() &&
                        hoveredDate.getTime() >= date.getTime()) ||
                        (date.getTime() < firstSelected &&
                            date.getTime() >= hoveredDate.getTime())) &&
                    'psds-calendar__date--in-range', firstSelected === date.getTime() &&
                    'psds-calendar__date--selected-start');
            }
        }
        return '';
    };
    return { onMouseLeave: onMouseLeave, onMouseEnter: onMouseEnter, isInRange: isInRange };
};
export var onRangeDateSelected = function (_a) {
    var _b = _a.selected, selected = _b === void 0 ? [] : _b, setSelected = _a.setSelected, onSelect = _a.onSelect, _c = _a.dateFormat, dateFormat = _c === void 0 ? 'MM/dd/yyyy' : _c, setEndValue = _a.setEndValue, setStartValue = _a.setStartValue;
    return function (dateObj, evt) {
        var selectable = dateObj.selectable, date = dateObj.date;
        if (!selectable) {
            return;
        }
        var dateTime = date.getTime();
        var newDates = __spreadArrays(selected);
        if (selected.length) {
            if (selected.length === 1) {
                var firstTime = selected[0].getTime();
                if (firstTime < dateTime) {
                    newDates.push(date);
                }
                else {
                    newDates.unshift(date);
                }
                setSelected(newDates);
                setStartValue && setStartValue(format(newDates[0], dateFormat));
                setEndValue && setEndValue(format(newDates[1], dateFormat));
            }
            else if (newDates.length === 2) {
                setSelected([date]);
                setStartValue && setStartValue(format(date, dateFormat));
                setEndValue && setEndValue('');
            }
        }
        else {
            newDates.push(date);
            setSelected(newDates);
            setStartValue && setStartValue(format(newDates[0], dateFormat));
            setEndValue && setEndValue(format(newDates[1], dateFormat));
        }
        onSelect && onSelect(evt, dateObj);
    };
};
var getDateIndex = function (selected, condition) {
    var index;
    selected.some(function (date, i) {
        index = i;
        if (condition(date.getTime())) {
            return true;
        }
        // If we loop through all the selected dates and still didn't find
        // one, make sure to add it to the end of the array.
        index++;
        return false;
    });
    return index;
};
export var onMultiDateSelected = function (_a) {
    var _b = _a.selected, selected = _b === void 0 ? [] : _b, setSelected = _a.setSelected, onSelect = _a.onSelect;
    return function (dateObj, evt) {
        var isSelected = dateObj.selected, selectable = dateObj.selectable, date = dateObj.date;
        if (!selectable) {
            return;
        }
        var newSelectedDates = selected.slice();
        var selectedTime = date.getTime();
        if (isSelected) {
            var index = getDateIndex(selected, function (time) { return selectedTime === time; });
            newSelectedDates.splice(index, 1);
        }
        else {
            // Add
            var index = getDateIndex(selected, function (time) { return selectedTime < time; });
            newSelectedDates.splice(index, 0, date);
        }
        setSelected(newSelectedDates);
        onSelect && onSelect(evt, dateObj);
    };
};
export var handleDateSelectChange = function (_a) {
    var selected = _a.selected, setSelected = _a.setSelected, value = _a.value, _b = _a.dateFormat, dateFormat = _b === void 0 ? 'MM/dd/yyyy' : _b;
    var fulldate = false;
    try {
        fulldate = isMatch(value, dateFormat);
    }
    catch (err) {
        if (!(err instanceof RangeError)) {
            throw err;
        }
    }
    var nextSelected = fulldate
        ? parse(value, dateFormat, new Date())
        : selected;
    setSelected(nextSelected);
};
export var handleRangeSelectChange = function (_a) {
    var start = _a.start, _b = _a.selected, selected = _b === void 0 ? [] : _b, value = _a.value, setSelected = _a.setSelected, _c = _a.dateFormat, dateFormat = _c === void 0 ? 'MM/dd/yyyy' : _c;
    var fulldate = false;
    try {
        fulldate = isMatch(value, dateFormat);
    }
    catch (err) {
        if (!(err instanceof RangeError)) {
            throw err;
        }
    }
    var nextSelected = fulldate
        ? parse(value, dateFormat, new Date())
        : selected;
    if (nextSelected instanceof Date &&
        !isNaN(nextSelected)) {
        if (selected) {
            !selected[0] && setSelected([]);
            start && setSelected([nextSelected, selected[1]].filter(Boolean));
            selected[0] && !start && setSelected([selected[0], nextSelected]);
        }
    }
};
//# sourceMappingURL=utils.js.map