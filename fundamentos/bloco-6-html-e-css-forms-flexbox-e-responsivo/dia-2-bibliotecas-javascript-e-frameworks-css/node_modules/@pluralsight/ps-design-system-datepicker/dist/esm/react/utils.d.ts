import type { DateObj } from 'dayzed';
import React from 'react';
import '../css/index.css';
export declare const useIsInRange: (selected?: Date[]) => {
    onMouseLeave: () => void;
    onMouseEnter: (date: Date) => void;
    isInRange: (date: Date) => string;
};
interface OnRangeDateSelected {
    dateFormat?: string;
    setSelected: (arr: Date[]) => void;
    selected?: Date[];
    onSelect?: (evt: React.SyntheticEvent, selectedDate: DateObj) => void;
    setEndValue?: React.Dispatch<React.SetStateAction<string>>;
    setStartValue?: React.Dispatch<React.SetStateAction<string>>;
}
export declare const onRangeDateSelected: ({ selected, setSelected, onSelect, dateFormat, setEndValue, setStartValue }: OnRangeDateSelected) => (dateObj: DateObj, evt: React.SyntheticEvent) => void;
export declare const onMultiDateSelected: ({ selected, setSelected, onSelect }: Omit<OnRangeDateSelected, 'setEndValue' | 'setStartValue'>) => (dateObj: DateObj, evt: React.SyntheticEvent) => void;
interface HandleChange<T> {
    dateFormat?: string;
    selected?: T;
    setSelected: React.Dispatch<React.SetStateAction<T | undefined>>;
    value: string;
}
export declare const handleDateSelectChange: ({ selected, setSelected, value, dateFormat }: HandleChange<Date>) => void;
interface HandleRangeChange extends HandleChange<Date[]> {
    start: boolean;
}
export declare const handleRangeSelectChange: ({ start, selected, value, setSelected, dateFormat }: HandleRangeChange) => void;
export {};
