var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { classNames } from '@pluralsight/ps-design-system-util';
import { endOfWeek, startOfWeek, add, sub, getMonth, isSameDay } from 'date-fns';
import { slides } from '../vars/index';
export var CalendarDay = function (_a) {
    var dateObj = _a.dateObj, className = _a.className, onKeyDown = _a.onKeyDown, dateProps = _a.dateProps, getBackProps = _a.getBackProps, getForwardProps = _a.getForwardProps, setSlide = _a.setSlide, setFocusable = _a.setFocusable, focusable = _a.focusable, calendars = _a.calendars, onClick = _a.onClick, monthButtonClicked = _a.monthButtonClicked, setMonthButtonClicked = _a.setMonthButtonClicked, rest = __rest(_a, ["dateObj", "className", "onKeyDown", "dateProps", "getBackProps", "getForwardProps", "setSlide", "setFocusable", "focusable", "calendars", "onClick", "monthButtonClicked", "setMonthButtonClicked"]);
    var date = dateObj.date, selected = dateObj.selected, selectable = dateObj.selectable, today = dateObj.today;
    var moveMonthForward = getForwardProps({ calendars: calendars }).onClick;
    var moveMonthBackward = getBackProps({ calendars: calendars }).onClick;
    var moveYearForward = getForwardProps({ calendars: calendars, offset: 12 }).onClick;
    var moveYearBackward = getBackProps({ calendars: calendars, offset: 12 }).onClick;
    var handleWeekEndStartFocus = function (dir) {
        var nextDate = dir === -1 ? startOfWeek(date) : endOfWeek(date);
        setFocusable(nextDate);
    };
    var handleMonthYearShift = function (dir, shiftKey, evt) {
        var _evt = evt;
        var args = shiftKey ? { years: 1 } : { months: 1 };
        var nextDate = dir === 1 ? add(date, args) : sub(date, args);
        setFocusable(nextDate);
        if (dir === 1) {
            shiftKey ? moveYearForward(_evt) : moveMonthForward(_evt);
            setSlide(slides.forward);
        }
        if (dir === -1) {
            shiftKey ? moveYearBackward(_evt) : moveMonthBackward(_evt);
            setSlide(slides.backward);
        }
    };
    var handleDayShift = function (dir, shift, evt) {
        var nextDate = dir === 1
            ? add(date, {
                days: shift
            })
            : sub(date, {
                days: shift
            });
        setFocusable(nextDate);
        var months = calendars === null || calendars === void 0 ? void 0 : calendars.map(function (calendar) { return calendar.month; });
        if (!months.includes(getMonth(nextDate))) {
            if (dir === 1) {
                moveMonthForward(evt);
                setSlide(slides.forward);
            }
            if (dir === -1) {
                moveMonthBackward(evt);
                setSlide(slides.backward);
            }
        }
    };
    var handleKeyDown = function (evt) {
        var key = evt.key, shiftKey = evt.shiftKey;
        key === 'ArrowUp' && handleDayShift(-1, 7, evt);
        key === 'ArrowDown' && handleDayShift(1, 7, evt);
        key === 'ArrowLeft' && handleDayShift(-1, 1, evt);
        key === 'ArrowRight' && handleDayShift(1, 1, evt);
        key === 'Home' && handleWeekEndStartFocus(-1);
        key === 'End' && handleWeekEndStartFocus(1);
        key === 'PageUp' && handleMonthYearShift(-1, shiftKey, evt);
        key === 'PageDown' && handleMonthYearShift(1, shiftKey, evt);
        key === 'Enter' && dateProps.onClick(evt);
        key === ' ' && dateProps.onClick(evt);
        onKeyDown && onKeyDown(evt);
        if (monthButtonClicked) {
            setMonthButtonClicked(false);
        }
    };
    var ref = React.useRef(null);
    React.useEffect(function () {
        var button = ref.current;
        if (button) {
            var canFocus = !monthButtonClicked && isSameDay(focusable, date);
            canFocus && button.focus();
        }
    }, [focusable]);
    React.useEffect(function () {
        var button = ref.current;
        if (button) {
            selected && button.focus();
        }
    }, []);
    return (React.createElement("button", __assign({}, rest, dateProps, { ref: ref, disabled: !selectable, tabIndex: selected || isSameDay(focusable, date) ? undefined : -1, className: classNames('psds-calendar__date', selected && 'psds-calendar__date--selected', today && 'psds-calendar__date--today', className), onKeyDown: handleKeyDown }), date.getDate()));
};
//# sourceMappingURL=calendar-day.js.map