var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import Halo from '@pluralsight/ps-design-system-halo';
import { WarningIcon } from '@pluralsight/ps-design-system-icon';
import { classNames, combineFns, forwardRefWithStatics } from '@pluralsight/ps-design-system-util';
import Theme, { names as themeNames } from '@pluralsight/ps-design-system-theme';
import React from 'react';
import '../css/field.css';
import { FieldContext } from './context';
import Input from './input';
import Label from './label';
import SubLabel from './sub-label';
import TextArea from './text-area';
import { appearances, sizes } from '../vars/index';
var Field = forwardRefWithStatics(function (props, forwardedRef) {
    var children = props.children, className = props.className, disabled = props.disabled, error = props.error, label = props.label, onClick = props.onClick, prefix = props.prefix, _a = props.renderContainer, renderContainer = _a === void 0 ? defaultRenderContainer : _a, _b = props.renderTag, renderTag = _b === void 0 ? defaultRenderTag : _b, _c = props.size, size = _c === void 0 ? sizes.medium : _c, subLabel = props.subLabel, suffix = props.suffix, rest = __rest(props, ["children", "className", "disabled", "error", "label", "onClick", "prefix", "renderContainer", "renderTag", "size", "subLabel", "suffix"]);
    var containerRef = React.useRef(null);
    React.useImperativeHandle(forwardedRef, function () { return containerRef.current; });
    var Container = React.useMemo(function () { return renderContainer; }, [renderContainer]);
    var Tag = React.useMemo(function () { return renderTag; }, [renderTag]);
    var focusOnClick = React.useCallback(function (evt) {
        var focusableTags = ['input', 'select', 'textarea'];
        var el = containerRef.current;
        if (!el || el.contains(document.activeElement))
            return;
        if (focusableTags.includes(getTargetTag(evt)))
            return;
        var node = el.querySelector(focusableTags.join(','));
        if (node)
            node.focus();
    }, []);
    var handleClick = combineFns(onClick, focusOnClick);
    return (React.createElement(FieldContext.Provider, { value: {
            size: size
        } },
        React.createElement(Container, { className: classNames('psds-field__container', disabled && 'psds-field__container--disabled', error && 'psds-field__container--error', className), onClick: handleClick, ref: containerRef },
            label && label,
            React.createElement(Theme, { name: themeNames.light },
                React.createElement(Halo, { error: error, gapSize: Halo.gapSizes.small, className: "psds-field__halo" },
                    React.createElement(Tag, __assign({}, rest, { className: classNames('psds-field', "psds-field--" + size, !!prefix && 'psds-field--prefix', !!suffix && 'psds-field--suffix') }),
                        prefix && React.createElement("div", { className: "psds-field__prefix" }, prefix),
                        children,
                        suffix && React.createElement("div", { className: "psds-field__suffix" }, suffix),
                        error && (React.createElement("div", { className: "psds-field__error-icon" },
                            React.createElement(WarningIcon, null)))))),
            subLabel && subLabel)));
});
var defaultRenderContainer = React.forwardRef(function (props, ref) { return React.createElement("div", __assign({ ref: ref }, props)); });
var defaultRenderTag = function (props) { return React.createElement("div", __assign({}, props)); };
var getTargetTag = function (evt) {
    if (!(evt.target instanceof Element))
        return 'unknown';
    return evt.target.tagName.toLowerCase();
};
Field.displayName = 'Field';
Field.Input = Input;
Field.Label = Label;
Field.SubLabel = SubLabel;
Field.TextArea = TextArea;
Field.appearances = appearances;
Field.sizes = sizes;
export default Field;
//# sourceMappingURL=field.js.map